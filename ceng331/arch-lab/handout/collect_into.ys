.pos 0
	irmovq Stack, %rsp
	irmovq root, %rdi
	irmovq array, %rsi
	irmovq $8, %rdx
	call collect_into
	halt

collect_into:
	pushq %rbx
	pushq %r11
	pushq %r12
	pushq %r8
	xorq %rax, %rax
	jmp check
begin:
	rrmovq %rdi, %rbx
	rrmovq %rsi, %r11
	rrmovq %rdx, %r12
	mrmovq 8(%rdi), %rdi
	rrmovq %r11, %rsi
	rrmovq %r12, %rdx
	call collect_into
	rrmovq %r12, %r8
	subq %rax, %r8
	je return
	rrmovq %rax, %r8
	addq %r8, %r8
	addq %r8, %r8
	addq %r8, %r8
	rrmovq %r8, %r12
	addq %r11, %r12
	mrmovq (%rbx), %r9
	rmmovq %r9, (%r12)
	mrmovq 16(%rbx), %rdi
	rrmovq %r11, %rsi
	irmovq $8, %r9
	addq %r9, %rsi
	rrmovq %r11, %rdx
	subq %r8, %rdx
	subq %r9, %rdx
	call collect_into
	irmovq $8, %r9
	addq %r8, %rax
	addq %r9, %rax
	jmp return
check:
	andq %rdi, %rdi
        je return
        andq %rdx, %rdx
        jg begin
return:
	popq %r8
	popq %r12
	popq %r11
	popq %rbx
	ret

.pos 0x200
root:
	.quad 17
	.quad node6
	.quad node24
node6:
	.quad 6
	.quad node4
	.quad node11
node4:
	.quad 4
	.quad node3
	.quad node5
node3:
	.quad 3
	.quad 0
	.quad 0
node5:
	.quad 5
	.quad 0 # Remember that 0 is null.
	.quad 0
node11:
	.quad 11
	.quad node8
	.quad 0
node8:
	.quad 8
	.quad 0
	.quad 0
node24:
	.quad 24
	.quad node19
	.quad node40
node19:
	.quad 19
	.quad 0
	.quad 0
node40:
	.quad 40
	.quad 0
	.quad node52
node52:
	.quad 52
	.quad 0
	.quad 0

.pos 0x400
array:
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

.pos 0x800
Stack:
